// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'main_test.dart' as prefix1;
import 'package:dart_inject/reflector.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_builder_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"TestService",
            r".TestService",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[0, 2],
            const <int>[3, 4, 5, 6, 7, 1],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => (name) => b ? new prefix1.TestService(name) : null},
            0,
            0,
            const <int>[],
            const <Object>[prefix0.reflector],
            null)
      ],
      <m.DeclarationMirror>[
        new r.VariableMirrorImpl(r"name", 33797, 0, const prefix0.Reflector(),
            -1, 1, 1, const <int>[], const <Object>[]),
        new r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 0, 1, 1, 1),
        new r.MethodMirrorImpl(r"", 0, 0, -1, 0, 0, const <int>[],
            const <int>[0], const prefix0.Reflector(), const <Object>[]),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, 2, 2, const <int>[],
            const <int>[1], const prefix0.Reflector(), const <Object>[]),
        new r.MethodMirrorImpl(
            r"toString",
            131074,
            null,
            -1,
            1,
            1,
            const <int>[],
            const <int>[],
            const prefix0.Reflector(),
            const <Object>[]),
        new r.MethodMirrorImpl(
            r"noSuchMethod",
            65538,
            null,
            null,
            null,
            null,
            const <int>[],
            const <int>[2],
            const prefix0.Reflector(),
            const <Object>[const pragma("vm:entry-point")]),
        new r.MethodMirrorImpl(
            r"hashCode",
            131075,
            null,
            -1,
            3,
            3,
            const <int>[],
            const <int>[],
            const prefix0.Reflector(),
            const <Object>[]),
        new r.MethodMirrorImpl(
            r"runtimeType",
            131075,
            null,
            -1,
            4,
            4,
            const <int>[],
            const <int>[],
            const prefix0.Reflector(),
            const <Object>[])
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(r"name", 32774, 2, const prefix0.Reflector(),
            -1, 1, 1, const <int>[], const <Object>[], null, null),
        new r.ParameterMirrorImpl(r"other", 16390, 3, const prefix0.Reflector(),
            null, null, null, const <int>[], const <Object>[], null, null),
        new r.ParameterMirrorImpl(
            r"invocation",
            32774,
            5,
            const prefix0.Reflector(),
            -1,
            5,
            5,
            const <int>[],
            const <Object>[],
            null,
            null)
      ],
      <Type>[prefix1.TestService, String, bool, int, Type, Invocation],
      1,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"name": (dynamic instance) => instance.name
      },
      {},
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(r"", Uri.parse(r"reflectable://0/"),
            const prefix0.Reflector(), const <int>[], {}, {}, const [], null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
